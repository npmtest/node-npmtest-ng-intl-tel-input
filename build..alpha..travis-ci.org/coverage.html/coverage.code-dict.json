{"/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/test.js":"/* istanbul instrument in package npmtest_ng_intl_tel_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/lib.npmtest_ng_intl_tel_input.js":"/* istanbul instrument in package npmtest_ng_intl_tel_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ng_intl_tel_input = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ng_intl_tel_input = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ng-intl-tel-input && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ng_intl_tel_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ng_intl_tel_input\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ng_intl_tel_input.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ng_intl_tel_input.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ng_intl_tel_input.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ng_intl_tel_input.__dirname + '/lib.npmtest_ng_intl_tel_input.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/dist/ng-intl-tel-input.js":"angular.module('ngIntlTelInput', []);angular.module('ngIntlTelInput')\n  .provider('ngIntlTelInput', function () {\n    var me = this;\n    var props = {};\n    var setFn = function (obj) {\n      if (typeof obj === 'object') {\n        for (var key in obj) {\n          props[key] = obj[key];\n        }\n      }\n    };\n    me.set = setFn;\n\n    me.$get = ['$log', function ($log) {\n      return Object.create(me, {\n        init: {\n          value: function (elm) {\n            if (!window.intlTelInputUtils) {\n              $log.warn('intlTelInputUtils is not defined. Formatting and validation will not work.');\n            }\n            elm.intlTelInput(props);\n          }\n        },\n      });\n    }];\n  });\nangular.module('ngIntlTelInput')\n  .directive('ngIntlTelInput', ['ngIntlTelInput', '$log', '$window', '$parse',\n    function (ngIntlTelInput, $log, $window, $parse) {\n      return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function (scope, elm, attr, ctrl) {\n          // Warning for bad directive usage.\n          if ((!!attr.type && (attr.type !== 'text' && attr.type !== 'tel')) || elm[0].tagName !== 'INPUT') {\n            $log.warn('ng-intl-tel-input can only be applied to a *text* or *tel* input');\n            return;\n          }\n          // Override default country.\n          if (attr.initialCountry) {\n            ngIntlTelInput.set({initialCountry: attr.initialCountry});\n          }\n          // Initialize.\n          ngIntlTelInput.init(elm);\n          // Set Selected Country Data.\n          function setSelectedCountryData(model) {\n            var getter = $parse(model);\n            var setter = getter.assign;\n            setter(scope, elm.intlTelInput('getSelectedCountryData'));\n          }\n          // Handle Country Changes.\n          function handleCountryChange() {\n            setSelectedCountryData(attr.selectedCountry);\n          }\n          // Country Change cleanup.\n          function cleanUp() {\n            angular.element($window).off('countrychange', handleCountryChange);\n          }\n          // Selected Country Data.\n          if (attr.selectedCountry) {\n            setSelectedCountryData(attr.selectedCountry);\n            angular.element($window).on('countrychange', handleCountryChange);\n            scope.$on('$destroy', cleanUp);\n          }\n          // Validation.\n          ctrl.$validators.ngIntlTelInput = function (value) {\n            // if phone number is deleted / empty do not run phone number validation\n            if (value || elm[0].value.length > 0) {\n                return elm.intlTelInput('isValidNumber');\n            } else {\n                return true;\n            }\n          };\n          // Set model value to valid, formatted version.\n          ctrl.$parsers.push(function (value) {\n            return elm.intlTelInput('getNumber');\n          });\n          // Set input value to model value and trigger evaluation.\n          ctrl.$formatters.push(function (value) {\n            if (value) {\n              if(value.charAt(0) !== '+') {\n                value = '+' + value;\n              }\n              elm.intlTelInput('setNumber', value);\n            }\n            return value;\n          });\n        }\n      };\n    }]);\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/karma.conf.js":"module.exports = function (config) {\n  config.set({\n    basePath: '',\n\n    frameworks: ['jasmine', 'sinon'],\n\n    browsers: ['PhantomJS'],\n\n    reporters: 'dots',\n\n    autoWatch: true,\n\n    singleRun: true,\n\n    plugins: [\n      'karma-phantomjs-launcher',\n      'karma-jasmine',\n      'karma-sinon'\n    ],\n\n    files: [\n      'bower_components/jquery/dist/jquery.js',\n      'bower_components/angularjs/angular.js',\n      'bower_components/angular-mocks/angular-mocks.js',\n      'bower_components/intl-tel-input/build/js/intlTelInput.js',\n      'bower_components/intl-tel-input/build/js/utils.js',\n      'ng-intl-tel-input.module.js',\n      'ng-intl-tel-input.provider.js',\n      'ng-intl-tel-input.directive.js',\n      'node_modules/phantomjs-polyfills/polyfills/function-bind-polyfill.js',\n      '*.spec.js'\n    ]\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/ng-intl-tel-input.directive.js":"angular.module('ngIntlTelInput')\n  .directive('ngIntlTelInput', ['ngIntlTelInput', '$log', '$window', '$parse',\n    function (ngIntlTelInput, $log, $window, $parse) {\n      return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function (scope, elm, attr, ctrl) {\n          // Warning for bad directive usage.\n          if ((!!attr.type && (attr.type !== 'text' && attr.type !== 'tel')) || elm[0].tagName !== 'INPUT') {\n            $log.warn('ng-intl-tel-input can only be applied to a *text* or *tel* input');\n            return;\n          }\n          // Override default country.\n          if (attr.initialCountry) {\n            ngIntlTelInput.set({initialCountry: attr.initialCountry});\n          }\n          // Initialize.\n          ngIntlTelInput.init(elm);\n          // Set Selected Country Data.\n          function setSelectedCountryData(model) {\n            var getter = $parse(model);\n            var setter = getter.assign;\n            setter(scope, elm.intlTelInput('getSelectedCountryData'));\n          }\n          // Handle Country Changes.\n          function handleCountryChange() {\n            setSelectedCountryData(attr.selectedCountry);\n          }\n          // Country Change cleanup.\n          function cleanUp() {\n            angular.element($window).off('countrychange', handleCountryChange);\n          }\n          // Selected Country Data.\n          if (attr.selectedCountry) {\n            setSelectedCountryData(attr.selectedCountry);\n            angular.element($window).on('countrychange', handleCountryChange);\n            scope.$on('$destroy', cleanUp);\n          }\n          // Validation.\n          ctrl.$validators.ngIntlTelInput = function (value) {\n            // if phone number is deleted / empty do not run phone number validation\n            if (value || elm[0].value.length > 0) {\n                return elm.intlTelInput('isValidNumber');\n            } else {\n                return true;\n            }\n          };\n          // Set model value to valid, formatted version.\n          ctrl.$parsers.push(function (value) {\n            return elm.intlTelInput('getNumber');\n          });\n          // Set input value to model value and trigger evaluation.\n          ctrl.$formatters.push(function (value) {\n            if (value) {\n              if(value.charAt(0) !== '+') {\n                value = '+' + value;\n              }\n              elm.intlTelInput('setNumber', value);\n            }\n            return value;\n          });\n        }\n      };\n    }]);\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/ng-intl-tel-input.directive.spec.js":"describe('ng-intl-tel-input', function () {\n\n  var $scope, form, doc, element;\n  beforeEach(module('ngIntlTelInput'));\n  beforeEach(inject(function ($compile, $rootScope) {\n    $scope = $rootScope;\n    doc = angular.element(\n      '<form name=\"form\">' +\n      '<label for=\"tel\">Telephone</label>' +\n      '<input ng-model=\"model.tel\" type=\"text\" name=\"tel\" ng-intl-tel-input />' +\n      '</form>'\n    );\n    $scope.model = {tel: ''};\n    $compile(doc)($scope);\n    $scope.$digest();\n    form = $scope.form;\n    element = doc.find('input').eq(0);\n  }));\n\n\n  it('should apply the intl-tel-input jquery plugin to text fields', function () {\n    expect(doc.find('.intl-tel-input').length).toEqual(1);\n  });\n\n  it('should apply the intl-tel-input jquery plugin to tel fields', inject(function ($compile, $rootScope) {\n    doc = angular.element(\n      '<form name=\"form\">' +\n      '<input ng-model=\"model.tel\" type=\"tel\" name=\"tel\" ng-intl-tel-input />' +\n      '</form>'\n    );\n    $compile(doc)($scope);\n    $scope.$digest();\n    expect(doc.find('.intl-tel-input').length).toEqual(1);\n  }));\n\n  it('should apply the intl-tel-input jquery plugin to text and tel fields', inject(function ($compile, $rootScope) {\n    doc = angular.element(\n      '<form name=\"form\">' +\n      '<input ng-model=\"model.tel\" type=\"password\" name=\"tel\" ng-intl-tel-input />' +\n      '<input ng-model=\"model.tel\" type=\"email\" name=\"tel\" ng-intl-tel-input />' +\n      '<input ng-model=\"model.tel\" type=\"number\" name=\"tel\" ng-intl-tel-input />' +\n      '<input ng-model=\"model.tel\" type=\"date\" name=\"tel\" ng-intl-tel-input />' +\n      '</form>'\n    );\n    $compile(doc)($scope);\n    $scope.$digest();\n    expect(doc.find('.intl-tel-input').length).toEqual(0);\n  }));\n\n  it('should set the field as invalid with bad input', function () {\n    angular.element(element).val('07400 123456').trigger('input');\n    $scope.$digest();\n    expect(form.tel.$error.ngIntlTelInput).toBeDefined();\n    expect(form.tel.$valid).toBe(false);\n  });\n\n  it('should set the field as invalid with input longer than > 0', function () {\n    angular.element(element).val('1').trigger('input');\n    $scope.$digest();\n    expect(form.tel.$error.ngIntlTelInput).toBeDefined();\n    expect(form.tel.$valid).toBe(false);\n  });\n\n  it('should set the field as valid with good input', function () {\n    angular.element(element).val('2103128425').trigger('input');\n    $scope.$digest();\n    expect(form.tel.$error.ngIntlTelInput).toBeUndefined();\n    expect(form.tel.$valid).toBe(true);\n  });\n\n  it('should set the field as valid with empty input', function () {\n    angular.element(element).val('').trigger('input');\n    $scope.$digest();\n    expect(form.tel.$error.ngIntlTelInput).toBeUndefined();\n    expect(form.tel.$valid).toBe(true);\n  });\n\n  it('should set the model value to the full phone number with dial code', function () {\n    angular.element(element).val('2103128425').trigger('input');\n    $scope.$digest();\n    expect($scope.model.tel).toEqual('+12103128425');\n  });\n\n  it('should set the model value to the full phone number with dial code and plus sign prefix', function () {\n    angular.element(element).val('+12103128425').trigger('input');\n    $scope.$digest();\n    expect($scope.model.tel).toEqual('+12103128425');\n  });\n\n  it('should not set the model value when invalid', function () {\n    angular.element(element).val('07400 123456').trigger('input');\n    $scope.$digest();\n    expect($scope.model.tel).toBeUndefined();\n  });\n\n  it('should set the initial country', inject(function ($compile) {\n    doc = angular.element(\n      '<form name=\"form\">' +\n      '<input ng-model=\"model.tel\" type=\"text\" name=\"tel\" ng-intl-tel-input data-initial-country=\"af\" />' +\n      '</form>'\n    );\n    $compile(doc)($scope);\n    $scope.$digest();\n    element = doc.find('input').eq(0);\n    expect(element.intlTelInput('getSelectedCountryData').iso2).toEqual('af');\n  }));\n\n  it('should set the country when model value is present', inject(function ($compile) {\n    $scope.model.tel = '447400123456';\n    doc = angular.element(\n      '<form name=\"form\">' +\n      '<input ng-model=\"model.tel\" type=\"text\" name=\"tel\" ng-intl-tel-input />' +\n      '</form>'\n    );\n    $compile(doc)($scope);\n    $scope.$digest();\n    element = doc.find('input').eq(0);\n    expect(element.intlTelInput('getSelectedCountryData').iso2).toEqual('gb');\n  }));\n\n  it('should set the country when model value is present with plus sign prefix', inject(function ($compile) {\n    $scope.model.tel = '+447400123456';\n    doc = angular.element(\n      '<form name=\"form\">' +\n      '<input ng-model=\"model.tel\" type=\"text\" name=\"tel\" ng-intl-tel-input />' +\n      '</form>'\n    );\n    $compile(doc)($scope);\n    $scope.$digest();\n    element = doc.find('input').eq(0);\n    expect(element.intlTelInput('getSelectedCountryData').iso2).toEqual('gb');\n  }));\n\n  it('should apply the intl-tel-input jquery plugin to input fields without a type declaration', inject(function ($compile) {\n    doc = angular.element(\n      '<form name=\"form\">' +\n      '<input ng-model=\"model.tel\" name=\"tel\" ng-intl-tel-input />' +\n      '</form>'\n    );\n    $compile(doc)($scope);\n    $scope.$digest();\n    expect(doc.find('.intl-tel-input').length).toEqual(1);\n  }));\n\n  it('should set the selected country data when data-selected-country attribute is present', inject(function ($compile) {\n    $scope.model.selectedCountry = null;\n    doc = angular.element(\n      '<form name=\"form\">' +\n      '<input ng-model=\"model.tel\" type=\"text\" name=\"tel\" ng-intl-tel-input data-selected-country=\"model.selectedCountry\" />' +\n      '</form>'\n    );\n    $compile(doc)($scope);\n    $scope.$digest();\n    expect($scope.model.selectedCountry.iso2).toEqual('us');\n  }));\n});\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/ng-intl-tel-input.e2e.js":"var page = Object.create({}, {\n  phone: {\n    get: function () {\n      return $('#tel');\n    },\n    set: function (number) {\n      this.phone.sendKeys(number);\n    }\n  },\n  phoneDefaultCountry: {\n    get: function () {\n      return $('#tel-dc');\n    },\n    set: function (number) {\n      this.phoneDefaultCountry.sendKeys(number);\n    }\n  }\n});\n\ndescribe('ng-intl-tel-input directive', function () {\n  it('should properly format a phone number', function () {\n    page.phone = '18002255288';\n    expect(page.phone.getAttribute('value')).to.eventually.equal('18002255288');\n  });\n\n  it('should set default country to data-initial-country', function () {\n    page.phoneDefaultCountry = '07400123456';\n    expect(page.phoneDefaultCountry.getAttribute('value')).to.eventually.equal('07400123456');\n  });\n\n  it('should set the selected country data when a different country is selected', function () {\n    element.all(by.css('.selected-flag')).get(1).click();\n    element.all(by.css('.flag-container .country[data-country-code=\"af\"] .flag-box .iti-flag')).get(1).click();\n    page.phoneDefaultCountry = '1';\n    expect(element(by.id('selectedCountry')).getText()).to.eventually.contain('Afghanistan');\n  });\n\n});\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/ng-intl-tel-input.module.js":"angular.module('ngIntlTelInput', []);","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/ng-intl-tel-input.provider.js":"angular.module('ngIntlTelInput')\n  .provider('ngIntlTelInput', function () {\n    var me = this;\n    var props = {};\n    var setFn = function (obj) {\n      if (typeof obj === 'object') {\n        for (var key in obj) {\n          props[key] = obj[key];\n        }\n      }\n    };\n    me.set = setFn;\n\n    me.$get = ['$log', function ($log) {\n      return Object.create(me, {\n        init: {\n          value: function (elm) {\n            if (!window.intlTelInputUtils) {\n              $log.warn('intlTelInputUtils is not defined. Formatting and validation will not work.');\n            }\n            elm.intlTelInput(props);\n          }\n        },\n      });\n    }];\n  });\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/ng-intl-tel-input.provider.spec.js":"describe('ngIntlTelInput Provider', function () {\n  var provider, element;\n  describe('Provider Config', function () {\n\n    beforeEach(module('ngIntlTelInput', function (ngIntlTelInputProvider) {\n      provider = ngIntlTelInputProvider;\n    }));\n    beforeEach(inject(function (_$injector_, $compile) {\n      $injector = _$injector_;\n      element = angular.element(\n        '<form name=\"form\">' +\n        '<label for=\"tel\">Telephone</label>' +\n        '<input ng-model=\"model.tel\" type=\"text\" name=\"tel\" ng-intl-tel-input />' +\n        '</form>'\n      );\n    }));\n\n    it('should allow the passsing of utils file', function () {\n      var script = {'utilsScript': '/path/to/utils'};\n      provider.set(script);\n      var stub = sinon.stub(element, 'intlTelInput');\n      $injector.invoke(provider.$get).init(element);\n      expect(stub.calledWith(script)).toBe(true);\n      stub.restore();\n    });\n\n    it('should set initial country', function () {\n      provider.set({'initialCountry': 'af'});\n      $injector.invoke(provider.$get).init(element);\n      expect(element.intlTelInput('getSelectedCountryData').iso2).toEqual('af');\n    });\n\n    it('should set multiple properties', function () {\n      var script = {'initialCountry': 'us', 'utilsScript': 'lol'};\n      provider.set(script);\n      var stub = sinon.stub(element, 'intlTelInput');\n      $injector.invoke(provider.$get).init(element);\n      expect(stub.calledWith(script)).toBe(true);\n      stub.restore();\n    });\n  });\n\n  describe('Attribute Config', function () {\n    beforeEach(module('ngIntlTelInput', function (ngIntlTelInputProvider) {\n      provider = ngIntlTelInputProvider;\n    }));\n    beforeEach(inject(function (_$injector_, $compile) {\n      $injector = _$injector_;\n      element = angular.element(\n        '<form name=\"form\">' +\n        '<label for=\"tel\">Telephone</label>' +\n        '<input ng-model=\"model.tel\" type=\"text\" name=\"tel\" ng-intl-tel-input data-initial-country=\"af\"/>' +\n        '</form>'\n      );\n    }));\n\n    it('should override the default country', inject(function ($compile, $rootScope) {\n      provider.set({'initialCountry': 'gb'});\n      var input = element.find('input');\n      $compile(element)($rootScope);\n      $rootScope.$digest();\n      expect(input.intlTelInput('getSelectedCountryData').iso2).toEqual('af');\n    }));\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-ng-intl-tel-input/node_modules/ng-intl-tel-input/protractor.conf.js":"var path = require('path');\n\nexports.config = {\n  rootElement: 'html',\n  seleniumServerJar: __dirname + '/node_modules/protractor/selenium/selenium-server-standalone-2.47.1.jar',\n\n  // A base URL for your application under test. Calls to protractor.get()\n  // with relative paths will be prepended with this.\n  baseUrl: 'http://localhost:8080',\n\n  specs: [\n    path.resolve('./ng-intl-tel-input.e2e.js')\n  ],\n\n  params: {},\n\n  framework: 'mocha',\n\n  // Capabilities to be passed to the webdriver instance.\n  capabilities: {\n    browserName: 'firefox'\n  },\n\n  allScriptsTimeout: (1000 * 60 * 4),\n  getPageTimeout: 60000,\n  // Options to be passed to mocha\n  mochaOpts: {\n    slow: 5000,\n    timeout: 60000,\n    ui: 'bdd'\n  },\n\n  onPrepare: function () {\n    rootDir = __dirname + '/..';\n    var chai = require('chai')\n      .use(require('chai-as-promised'));\n    chai.config.truncateThreshold = 0;\n    expect = chai.expect;\n    browser.driver.get(browser.baseUrl);\n  }\n};\n"}